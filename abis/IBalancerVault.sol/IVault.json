{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum SwapKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "assetInIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetOutIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct BatchSwapStep[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct FundManagement",
          "name": "funds",
          "type": "tuple"
        },
        {
          "internalType": "int256[]",
          "name": "limits",
          "type": "int256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "batchSwap",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "getPoolTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "lastChangeBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "maxAmountsIn",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct JoinPoolRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "enum SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct SingleSwap",
          "name": "singleSwap",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct FundManagement",
          "name": "funds",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": "945bcec9",
    "getPoolTokens(bytes32)": "f94d4668",
    "joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "b95cac28",
    "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": "52bbbe29"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Entry point for all Balancer V2 swaps.\",\"kind\":\"dev\",\"methods\":{\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct.  The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead.\"},\"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/vendor/IBalancerVault.sol\":\"IVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@prb/test/=lib/prb-proxy/lib/prb-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/permit2/src/\",\":prb-proxy/=lib/prb-proxy/src/\",\":prb-test/=lib/prb-proxy/lib/prb-test/src/\",\":solmate/=lib/permit2/lib/solmate/\"]},\"sources\":{\"src/vendor/IBalancerVault.sol\":{\"keccak256\":\"0xc4d7312f444bd3990ca3180052b6c01c5d10b817d6452df2f6de5da270ed6179\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://65faf1ee901a992c98e2f60e8f06ee26ed77ca54e71acd86d93334c7904131c1\",\"dweb:/ipfs/Qmf6iS7TNfRy9P392yTQTHHkk7ybJc9CCRabsTYzHaDAFr\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "enum SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "struct BatchSwapStep[]",
              "name": "swaps",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "assetInIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "assetOutIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "address[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "struct FundManagement",
              "name": "funds",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fromInternalBalance",
                  "type": "bool"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "toInternalBalance",
                  "type": "bool"
                }
              ]
            },
            {
              "internalType": "int256[]",
              "name": "limits",
              "type": "int256[]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "batchSwap",
          "outputs": [
            {
              "internalType": "int256[]",
              "name": "",
              "type": "int256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPoolTokens",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "balances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "lastChangeBlock",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "struct JoinPoolRequest",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "assets",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "maxAmountsIn",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                },
                {
                  "internalType": "bool",
                  "name": "fromInternalBalance",
                  "type": "bool"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "joinPool"
        },
        {
          "inputs": [
            {
              "internalType": "struct SingleSwap",
              "name": "singleSwap",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum SwapKind",
                  "name": "kind",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "assetOut",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "struct FundManagement",
              "name": "funds",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fromInternalBalance",
                  "type": "bool"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "toInternalBalance",
                  "type": "bool"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "swap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": {
            "details": "Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct.  The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events."
          },
          "getPoolTokens(bytes32)": {
            "details": "Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead."
          },
          "joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": {
            "details": "Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event."
          },
          "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": {
            "details": "Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "@prb/test/=lib/prb-proxy/lib/prb-test/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/",
        "forge-std/=lib/forge-std/src/",
        "hardhat-deploy/=node_modules/hardhat-deploy/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "permit2/=lib/permit2/src/",
        "prb-proxy/=lib/prb-proxy/src/",
        "prb-test/=lib/prb-proxy/lib/prb-test/src/",
        "solmate/=lib/permit2/lib/solmate/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 100
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/vendor/IBalancerVault.sol": "IVault"
      },
      "libraries": {}
    },
    "sources": {
      "src/vendor/IBalancerVault.sol": {
        "keccak256": "0xc4d7312f444bd3990ca3180052b6c01c5d10b817d6452df2f6de5da270ed6179",
        "urls": [
          "bzz-raw://65faf1ee901a992c98e2f60e8f06ee26ed77ca54e71acd86d93334c7904131c1",
          "dweb:/ipfs/Qmf6iS7TNfRy9P392yTQTHHkk7ybJc9CCRabsTYzHaDAFr"
        ],
        "license": "AGPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/vendor/IBalancerVault.sol",
    "id": 135006,
    "exportedSymbols": {
      "BatchSwapStep": [
        134919
      ],
      "FundManagement": [
        134908
      ],
      "IVault": [
        135005
      ],
      "JoinKind": [
        134935
      ],
      "JoinPoolRequest": [
        134930
      ],
      "SingleSwap": [
        134899
      ],
      "SwapKind": [
        134885
      ]
    },
    "nodeType": "SourceUnit",
    "src": "46:9218:187",
    "nodes": [
      {
        "id": 134882,
        "nodeType": "PragmaDirective",
        "src": "46:24:187",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 134885,
        "nodeType": "EnumDefinition",
        "src": "72:37:187",
        "nodes": [],
        "canonicalName": "SwapKind",
        "members": [
          {
            "id": 134883,
            "name": "GIVEN_IN",
            "nameLocation": "88:8:187",
            "nodeType": "EnumValue",
            "src": "88:8:187"
          },
          {
            "id": 134884,
            "name": "GIVEN_OUT",
            "nameLocation": "98:9:187",
            "nodeType": "EnumValue",
            "src": "98:9:187"
          }
        ],
        "name": "SwapKind",
        "nameLocation": "77:8:187"
      },
      {
        "id": 134899,
        "nodeType": "StructDefinition",
        "src": "710:131:187",
        "nodes": [],
        "canonicalName": "SingleSwap",
        "members": [
          {
            "constant": false,
            "id": 134887,
            "mutability": "mutable",
            "name": "poolId",
            "nameLocation": "740:6:187",
            "nodeType": "VariableDeclaration",
            "scope": 134899,
            "src": "732:14:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 134886,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "732:7:187",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134890,
            "mutability": "mutable",
            "name": "kind",
            "nameLocation": "759:4:187",
            "nodeType": "VariableDeclaration",
            "scope": 134899,
            "src": "750:13:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_SwapKind_$134885",
              "typeString": "enum SwapKind"
            },
            "typeName": {
              "id": 134889,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 134888,
                "name": "SwapKind",
                "nameLocations": [
                  "750:8:187"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 134885,
                "src": "750:8:187"
              },
              "referencedDeclaration": 134885,
              "src": "750:8:187",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_SwapKind_$134885",
                "typeString": "enum SwapKind"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134892,
            "mutability": "mutable",
            "name": "assetIn",
            "nameLocation": "775:7:187",
            "nodeType": "VariableDeclaration",
            "scope": 134899,
            "src": "767:15:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 134891,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "767:7:187",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134894,
            "mutability": "mutable",
            "name": "assetOut",
            "nameLocation": "794:8:187",
            "nodeType": "VariableDeclaration",
            "scope": 134899,
            "src": "786:16:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 134893,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "786:7:187",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134896,
            "mutability": "mutable",
            "name": "amount",
            "nameLocation": "814:6:187",
            "nodeType": "VariableDeclaration",
            "scope": 134899,
            "src": "806:14:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 134895,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "806:7:187",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134898,
            "mutability": "mutable",
            "name": "userData",
            "nameLocation": "830:8:187",
            "nodeType": "VariableDeclaration",
            "scope": 134899,
            "src": "824:14:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 134897,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "824:5:187",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }
        ],
        "name": "SingleSwap",
        "nameLocation": "717:10:187",
        "scope": 135006,
        "visibility": "public"
      },
      {
        "id": 134908,
        "nodeType": "StructDefinition",
        "src": "1716:126:187",
        "nodes": [],
        "canonicalName": "FundManagement",
        "members": [
          {
            "constant": false,
            "id": 134901,
            "mutability": "mutable",
            "name": "sender",
            "nameLocation": "1750:6:187",
            "nodeType": "VariableDeclaration",
            "scope": 134908,
            "src": "1742:14:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 134900,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1742:7:187",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134903,
            "mutability": "mutable",
            "name": "fromInternalBalance",
            "nameLocation": "1765:19:187",
            "nodeType": "VariableDeclaration",
            "scope": 134908,
            "src": "1760:24:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 134902,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1760:4:187",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134905,
            "mutability": "mutable",
            "name": "recipient",
            "nameLocation": "1804:9:187",
            "nodeType": "VariableDeclaration",
            "scope": 134908,
            "src": "1788:25:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 134904,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1788:15:187",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134907,
            "mutability": "mutable",
            "name": "toInternalBalance",
            "nameLocation": "1822:17:187",
            "nodeType": "VariableDeclaration",
            "scope": 134908,
            "src": "1817:22:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 134906,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1817:4:187",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }
        ],
        "name": "FundManagement",
        "nameLocation": "1723:14:187",
        "scope": 135006,
        "visibility": "public"
      },
      {
        "id": 134919,
        "nodeType": "StructDefinition",
        "src": "2369:127:187",
        "nodes": [],
        "canonicalName": "BatchSwapStep",
        "members": [
          {
            "constant": false,
            "id": 134910,
            "mutability": "mutable",
            "name": "poolId",
            "nameLocation": "2402:6:187",
            "nodeType": "VariableDeclaration",
            "scope": 134919,
            "src": "2394:14:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 134909,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "2394:7:187",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134912,
            "mutability": "mutable",
            "name": "assetInIndex",
            "nameLocation": "2420:12:187",
            "nodeType": "VariableDeclaration",
            "scope": 134919,
            "src": "2412:20:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 134911,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2412:7:187",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134914,
            "mutability": "mutable",
            "name": "assetOutIndex",
            "nameLocation": "2444:13:187",
            "nodeType": "VariableDeclaration",
            "scope": 134919,
            "src": "2436:21:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 134913,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2436:7:187",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134916,
            "mutability": "mutable",
            "name": "amount",
            "nameLocation": "2469:6:187",
            "nodeType": "VariableDeclaration",
            "scope": 134919,
            "src": "2461:14:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 134915,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2461:7:187",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134918,
            "mutability": "mutable",
            "name": "userData",
            "nameLocation": "2485:8:187",
            "nodeType": "VariableDeclaration",
            "scope": 134919,
            "src": "2479:14:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 134917,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "2479:5:187",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }
        ],
        "name": "BatchSwapStep",
        "nameLocation": "2376:13:187",
        "scope": 135006,
        "visibility": "public"
      },
      {
        "id": 134930,
        "nodeType": "StructDefinition",
        "src": "2549:118:187",
        "nodes": [],
        "canonicalName": "JoinPoolRequest",
        "members": [
          {
            "constant": false,
            "id": 134922,
            "mutability": "mutable",
            "name": "assets",
            "nameLocation": "2586:6:187",
            "nodeType": "VariableDeclaration",
            "scope": 134930,
            "src": "2576:16:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 134920,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2576:7:187",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 134921,
              "nodeType": "ArrayTypeName",
              "src": "2576:9:187",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134925,
            "mutability": "mutable",
            "name": "maxAmountsIn",
            "nameLocation": "2606:12:187",
            "nodeType": "VariableDeclaration",
            "scope": 134930,
            "src": "2596:22:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
              "typeString": "uint256[]"
            },
            "typeName": {
              "baseType": {
                "id": 134923,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2596:7:187",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 134924,
              "nodeType": "ArrayTypeName",
              "src": "2596:9:187",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134927,
            "mutability": "mutable",
            "name": "userData",
            "nameLocation": "2628:8:187",
            "nodeType": "VariableDeclaration",
            "scope": 134930,
            "src": "2622:14:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 134926,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "2622:5:187",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 134929,
            "mutability": "mutable",
            "name": "fromInternalBalance",
            "nameLocation": "2645:19:187",
            "nodeType": "VariableDeclaration",
            "scope": 134930,
            "src": "2640:24:187",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 134928,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "2640:4:187",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }
        ],
        "name": "JoinPoolRequest",
        "nameLocation": "2556:15:187",
        "scope": 135006,
        "visibility": "public"
      },
      {
        "id": 134935,
        "nodeType": "EnumDefinition",
        "src": "2776:120:187",
        "nodes": [],
        "canonicalName": "JoinKind",
        "members": [
          {
            "id": 134931,
            "name": "INIT",
            "nameLocation": "2794:4:187",
            "nodeType": "EnumValue",
            "src": "2794:4:187"
          },
          {
            "id": 134932,
            "name": "EXACT_TOKENS_IN_FOR_BPT_OUT",
            "nameLocation": "2802:27:187",
            "nodeType": "EnumValue",
            "src": "2802:27:187"
          },
          {
            "id": 134933,
            "name": "TOKEN_IN_FOR_EXACT_BPT_OUT",
            "nameLocation": "2833:26:187",
            "nodeType": "EnumValue",
            "src": "2833:26:187"
          },
          {
            "id": 134934,
            "name": "ALL_TOKENS_IN_FOR_EXACT_BPT_OUT",
            "nameLocation": "2863:31:187",
            "nodeType": "EnumValue",
            "src": "2863:31:187"
          }
        ],
        "name": "JoinKind",
        "nameLocation": "2781:8:187"
      },
      {
        "id": 135005,
        "nodeType": "ContractDefinition",
        "src": "2945:6318:187",
        "nodes": [
          {
            "id": 134952,
            "nodeType": "FunctionDefinition",
            "src": "3545:161:187",
            "nodes": [],
            "documentation": {
              "id": 134937,
              "nodeType": "StructuredDocumentation",
              "src": "2967:575:187",
              "text": " @dev Performs a swap with a single Pool.\n If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n taken from the Pool, which must be greater than or equal to `limit`.\n If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n sent to the Pool, which must be less than or equal to `limit`.\n Internal Balance usage and the recipient are determined by the `funds` struct.\n Emits a `Swap` event."
            },
            "functionSelector": "52bbbe29",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "swap",
            "nameLocation": "3554:4:187",
            "parameters": {
              "id": 134948,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134940,
                  "mutability": "mutable",
                  "name": "singleSwap",
                  "nameLocation": "3582:10:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134952,
                  "src": "3564:28:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SingleSwap_$134899_memory_ptr",
                    "typeString": "struct SingleSwap"
                  },
                  "typeName": {
                    "id": 134939,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 134938,
                      "name": "SingleSwap",
                      "nameLocations": [
                        "3564:10:187"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 134899,
                      "src": "3564:10:187"
                    },
                    "referencedDeclaration": 134899,
                    "src": "3564:10:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SingleSwap_$134899_storage_ptr",
                      "typeString": "struct SingleSwap"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134943,
                  "mutability": "mutable",
                  "name": "funds",
                  "nameLocation": "3620:5:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134952,
                  "src": "3598:27:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FundManagement_$134908_memory_ptr",
                    "typeString": "struct FundManagement"
                  },
                  "typeName": {
                    "id": 134942,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 134941,
                      "name": "FundManagement",
                      "nameLocations": [
                        "3598:14:187"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 134908,
                      "src": "3598:14:187"
                    },
                    "referencedDeclaration": 134908,
                    "src": "3598:14:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FundManagement_$134908_storage_ptr",
                      "typeString": "struct FundManagement"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134945,
                  "mutability": "mutable",
                  "name": "limit",
                  "nameLocation": "3639:5:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134952,
                  "src": "3631:13:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 134944,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3631:7:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134947,
                  "mutability": "mutable",
                  "name": "deadline",
                  "nameLocation": "3658:8:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134952,
                  "src": "3650:16:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 134946,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3650:7:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3558:112:187"
            },
            "returnParameters": {
              "id": 134951,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134950,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 134952,
                  "src": "3697:7:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 134949,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3697:7:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3696:9:187"
            },
            "scope": 135005,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 134977,
            "nodeType": "FunctionDefinition",
            "src": "5611:231:187",
            "nodes": [],
            "documentation": {
              "id": 134953,
              "nodeType": "StructuredDocumentation",
              "src": "3711:1897:187",
              "text": " @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n the same index in the `assets` array.\n Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n `amountOut` depending on the swap kind.\n Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n or unwrapped from WETH by the Vault.\n Internal Balance usage, sender, and recipient are determined by the `funds` struct. \n The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer.\n `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n equivalent `swap` call.\n Emits `Swap` events."
            },
            "functionSelector": "945bcec9",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "batchSwap",
            "nameLocation": "5620:9:187",
            "parameters": {
              "id": 134972,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134956,
                  "mutability": "mutable",
                  "name": "kind",
                  "nameLocation": "5644:4:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134977,
                  "src": "5635:13:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_SwapKind_$134885",
                    "typeString": "enum SwapKind"
                  },
                  "typeName": {
                    "id": 134955,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 134954,
                      "name": "SwapKind",
                      "nameLocations": [
                        "5635:8:187"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 134885,
                      "src": "5635:8:187"
                    },
                    "referencedDeclaration": 134885,
                    "src": "5635:8:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_SwapKind_$134885",
                      "typeString": "enum SwapKind"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134960,
                  "mutability": "mutable",
                  "name": "swaps",
                  "nameLocation": "5677:5:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134977,
                  "src": "5654:28:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$134919_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct BatchSwapStep[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 134958,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 134957,
                        "name": "BatchSwapStep",
                        "nameLocations": [
                          "5654:13:187"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 134919,
                        "src": "5654:13:187"
                      },
                      "referencedDeclaration": 134919,
                      "src": "5654:13:187",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_BatchSwapStep_$134919_storage_ptr",
                        "typeString": "struct BatchSwapStep"
                      }
                    },
                    "id": 134959,
                    "nodeType": "ArrayTypeName",
                    "src": "5654:15:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$134919_storage_$dyn_storage_ptr",
                      "typeString": "struct BatchSwapStep[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134963,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "5705:6:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134977,
                  "src": "5688:23:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 134961,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "5688:7:187",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 134962,
                    "nodeType": "ArrayTypeName",
                    "src": "5688:9:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134966,
                  "mutability": "mutable",
                  "name": "funds",
                  "nameLocation": "5739:5:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134977,
                  "src": "5717:27:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FundManagement_$134908_memory_ptr",
                    "typeString": "struct FundManagement"
                  },
                  "typeName": {
                    "id": 134965,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 134964,
                      "name": "FundManagement",
                      "nameLocations": [
                        "5717:14:187"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 134908,
                      "src": "5717:14:187"
                    },
                    "referencedDeclaration": 134908,
                    "src": "5717:14:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FundManagement_$134908_storage_ptr",
                      "typeString": "struct FundManagement"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134969,
                  "mutability": "mutable",
                  "name": "limits",
                  "nameLocation": "5766:6:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134977,
                  "src": "5750:22:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 134967,
                      "name": "int256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5750:6:187",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 134968,
                    "nodeType": "ArrayTypeName",
                    "src": "5750:8:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134971,
                  "mutability": "mutable",
                  "name": "deadline",
                  "nameLocation": "5786:8:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134977,
                  "src": "5778:16:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 134970,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5778:7:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5629:169:187"
            },
            "returnParameters": {
              "id": 134976,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134975,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 134977,
                  "src": "5825:15:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 134973,
                      "name": "int256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5825:6:187",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 134974,
                    "nodeType": "ArrayTypeName",
                    "src": "5825:8:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5824:17:187"
            },
            "scope": 135005,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 134990,
            "nodeType": "FunctionDefinition",
            "src": "8125:148:187",
            "nodes": [],
            "documentation": {
              "id": 134978,
              "nodeType": "StructuredDocumentation",
              "src": "5847:2273:187",
              "text": " @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n Pool shares.\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n these maximums.\n If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n back to the caller (not the sender, which is important for relayers).\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n withdrawn from Internal Balance: attempting to do so will trigger a revert.\n This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n directly to the Pool's contract, as is `recipient`.\n Emits a `PoolBalanceChanged` event."
            },
            "functionSelector": "b95cac28",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "joinPool",
            "nameLocation": "8134:8:187",
            "parameters": {
              "id": 134988,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134980,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "8158:6:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134990,
                  "src": "8150:14:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 134979,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8150:7:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134982,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "8180:6:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134990,
                  "src": "8172:14:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 134981,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8172:7:187",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134984,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "8202:9:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134990,
                  "src": "8194:17:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 134983,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8194:7:187",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134987,
                  "mutability": "mutable",
                  "name": "request",
                  "nameLocation": "8242:7:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 134990,
                  "src": "8219:30:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_JoinPoolRequest_$134930_memory_ptr",
                    "typeString": "struct JoinPoolRequest"
                  },
                  "typeName": {
                    "id": 134986,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 134985,
                      "name": "JoinPoolRequest",
                      "nameLocations": [
                        "8219:15:187"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 134930,
                      "src": "8219:15:187"
                    },
                    "referencedDeclaration": 134930,
                    "src": "8219:15:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_JoinPoolRequest_$134930_storage_ptr",
                      "typeString": "struct JoinPoolRequest"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8142:113:187"
            },
            "returnParameters": {
              "id": 134989,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8272:0:187"
            },
            "scope": 135005,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 135004,
            "nodeType": "FunctionDefinition",
            "src": "9097:163:187",
            "nodes": [],
            "documentation": {
              "id": 134991,
              "nodeType": "StructuredDocumentation",
              "src": "8277:815:187",
              "text": " @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n the tokens' `balances` changed.\n The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n order as passed to `registerTokens`.\n Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n instead."
            },
            "functionSelector": "f94d4668",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPoolTokens",
            "nameLocation": "9106:13:187",
            "parameters": {
              "id": 134994,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134993,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "9128:6:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 135004,
                  "src": "9120:14:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 134992,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "9120:7:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9119:16:187"
            },
            "returnParameters": {
              "id": 135003,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134997,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "9183:6:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 135004,
                  "src": "9166:23:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 134995,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9166:7:187",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 134996,
                    "nodeType": "ArrayTypeName",
                    "src": "9166:9:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 135000,
                  "mutability": "mutable",
                  "name": "balances",
                  "nameLocation": "9214:8:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 135004,
                  "src": "9197:25:187",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 134998,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "9197:7:187",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 134999,
                    "nodeType": "ArrayTypeName",
                    "src": "9197:9:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 135002,
                  "mutability": "mutable",
                  "name": "lastChangeBlock",
                  "nameLocation": "9238:15:187",
                  "nodeType": "VariableDeclaration",
                  "scope": 135004,
                  "src": "9230:23:187",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 135001,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9230:7:187",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9158:101:187"
            },
            "scope": 135005,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IVault",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 134936,
          "nodeType": "StructuredDocumentation",
          "src": "2898:47:187",
          "text": "@dev Entry point for all Balancer V2 swaps."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          135005
        ],
        "name": "IVault",
        "nameLocation": "2955:6:187",
        "scope": 135006,
        "usedErrors": []
      }
    ],
    "license": "AGPL-3.0-or-later"
  },
  "id": 187
}